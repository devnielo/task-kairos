version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start:dev
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
      - ./storage/input:/usr/src/app/storage/input
      - ./storage/output:/usr/src/app/storage/output

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start:worker:dev
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
      - ./storage/input:/usr/src/app/storage/input
      - ./storage/output:/usr/src/app/storage/output

  mongo:
    image: mongo:7.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: image_processing
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb_data:
